name: "Johweb App Code Production Workflow"
on:
  workflow_dispatch:  # in future change this to 'pull_request'
    branches:
      - infra-staging
    paths:
      - webapp/*

env:
  TF_VAR_THE_KEY: ${{ secrets.TF_VAR_THE_KEY }}
  WEBSRV_USR: ${{ vars.WEBSRV_USR }}
  ECR_ENDPOINT: ${{ vars.ECR_ENDPOINT }}
  HOST_IP: ${{ vars.HOST_IP }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

jobs:
  Gather_Instance_Info:
    name: "Gather IP Addresses of Web Server and Bastion"
    runs-on: ubuntu-latest
    outputs:
      web_server_ip: ${{ steps.pyscript.outputs.web }}
      proxy_server_ip: ${{ steps.pyscript.outputs.proxy }}
      bastion_host_args: ${{ steps.pyscript.outputs.bastion }}

    steps:

      - name: Install pip3
        run: sudo apt install python3-pip -y

      - name: Install Boto3
        run: pip3 install boto3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TF_VAR_THE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Edit SSH Config to prevent Host Checking 
        run: |
          touch ~/.ssh/config
          cat << EOF >> ~/.ssh/config
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          cat ~/.ssh/config
    
      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          ref: main                      


      - name: Run Dynamic Inventory Script
        id: pyscript
        run: |
          ansible/dynamic-inventory.py > inventory.json
          web_server_ip=$(jq -r .web_servers.hosts[0] inventory.json)
          proxy_server_ip=$(jq -r .web_servers.hosts[0] inventory.json)
          bastion_host_args=$(jq -r .web_servers.vars.ansible_ssh_common_args inventory.json)
          
          echo "web=${web_server_ip}" >> "$GITHUB_OUTPUT"
          echo "proxy=${proxy_server_ip}" >> "$GITHUB_OUTPUT"
          echo "bastion=${bastion_host_args}" >> "$GITHUB_OUTPUT"

  Container_Deployment:
    needs: Gather_Instance_Info
    name: "Container Deployment Using Docker"
    runs-on: ubuntu-latest
    steps:

      - name: "Checkout Main branch"
        uses: actions/checkout@v2
        with:
          ref: main

      - name: "Copy compose file to Web Server"
        run: |
          scp ${{needs.Gather_Instance_Info.outputs.bastion_host_args}} webapp/compose.yml ${{vars.WEBSRV_USR}}@${{needs.Gather_Instance_Info.outputs.web_server_ip}}:/home/${{vars.WEBSRV_USR}}/

      - name: "Check if Docker is running"
        service:
          name: docker
          state: started
          enabled: yes

      - name: Starting Web Server through Docker Compose
        run: >
          ssh ${{needs.Ansible.outputs.bastion_host_args}}
          ${{ vars.WEBSRV_USR }}@${{needs.Ansible.outputs.web_server_ip}}
          "docker-compose -f /home/${{ vars.WEBSRV_USR }}/compose.yml up -d johweb"

