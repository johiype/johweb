name: "Johweb App Production Workflow"
on:
  workflow_call:
  push:
    branches:
      - main
    paths:
      - webapp/**

env:
  TF_VAR_THE_KEY: ${{ secrets.TF_VAR_THE_KEY }}
  WEBSRV_USR: ${{ vars.WEBSRV_USR }}
  ECR_ENDPOINT: ${{ vars.ECR_ENDPOINT }}
  HOST_IP: ${{ vars.HOST_IP }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

jobs:
  boto3:
    name: "Gather Instance Details"
    runs-on: ubuntu-latest
    outputs:
      web_server_ip: ${{ steps.pyscript.outputs.web }}
      proxy_server_ip: ${{ steps.pyscript.outputs.proxy }}
      bastion_host_args: ${{ steps.pyscript.outputs.bastion }}

    steps:
      - name: Install pip3
        run: sudo apt install python3-pip -y

      - name: Install Boto3
        run: pip3 install boto3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TF_VAR_THE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Edit SSH Config to prevent Host Checking
        run: |
          touch ~/.ssh/config
          cat << EOF >> ~/.ssh/config
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          cat ~/.ssh/config

      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          ref: main


      - name: Run Dynamic Inventory Script
        id: pyscript
        run: |
          ansible/dynamic-inventory.py > inventory.json
          web_server_ip=$(jq -r .web_servers.hosts[0] inventory.json)
          proxy_server_ip=$(jq -r .proxy_servers.hosts[0] inventory.json)
          bastion_host_args=$(jq -r .web_servers.vars.ansible_ssh_common_args inventory.json)

          echo "web=${web_server_ip}" >> "$GITHUB_OUTPUT"
          echo "proxy=${proxy_server_ip}" >> "$GITHUB_OUTPUT"
          echo "bastion=${bastion_host_args}" >> "$GITHUB_OUTPUT"

  Production:
    name: "Prepare and Deploy Web App Production Environment"
    runs-on: ubuntu-latest
    needs: boto3

    steps:
      - name: "Set up SSH key"
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TF_VAR_THE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          PRIVATE_KEY: ${{ secrets.TF_VAR_THE_KEY }}

      - name: "Checkout Source Code"
        uses: actions/checkout@v2
        with:
          ref: main

      - name: "Edit SSH Config to prevent Host Checking"
        run: |
          touch ~/.ssh/config
          cat << EOF >> ~/.ssh/config
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          cat ~/.ssh/config

      - name: "Copy Files to Web Server and Proxy Server"
        run: |

          # Copy Compose file to Web Server
          scp ${{needs.boto3.outputs.bastion_host_args}} webapp/compose.yml ${{vars.WEBSRV_USR}}@${{needs.boto3.outputs.web_server_ip}}:/home/${{vars.WEBSRV_USR}}/

          # Copy Compose file to Proxy Server
          scp ${{needs.boto3.outputs.bastion_host_args}} webapp/compose.yml ${{vars.WEBSRV_USR}}@${{needs.boto3.outputs.proxy_server_ip}}:/home/${{vars.WEBSRV_USR}}/
          # scp ${{needs.boto3.outputs.bastion_host_args}} webapp/Caddyfile ${{vars.WEBSRV_USR}}@${{needs.boto3.outputs.proxy_server_ip}}:/home/${{vars.WEBSRV_USR}}/

      - name: "Setting up Hugo"
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.128.0'

      - name: "Building Hugo Site"
        working-directory: ./webapp/johweb-site
        run: hugo

      - name: "Creating johweb-content folder"
        run: |
          ssh ${{needs.boto3.outputs.bastion_host_args}} ${{ vars.WEBSRV_USR }}@${{needs.boto3.outputs.web_server_ip}} "
          mkdir -p /home/${{ vars.WEBSRV_USR }}/johweb-content
            "

      - name: "Copying Hugo Built Files to Web Server"
        run: |
          scp -r ${{needs.boto3.outputs.bastion_host_args}} webapp/johweb-site/public/* ${{vars.WEBSRV_USR}}@${{needs.boto3.outputs.web_server_ip}}:/home/${{vars.WEBSRV_USR}}/johweb-content

      - name: "Preparing Production Environment in Web Server"
        run: |
          ssh ${{needs.boto3.outputs.bastion_host_args}} ${{ vars.WEBSRV_USR }}@${{needs.boto3.outputs.web_server_ip}} '

            # Set permissions on Compose file
            sudo chown ${{ vars.WEBSRV_USR }}:${{ vars.WEBSRV_USR }} /home/${{ vars.WEBSRV_USR }}/compose.yml && sudo chmod 0644 /home/${{ vars.WEBSRV_USR }}/compose.yml

            # Starting Web Server through Docker Compose
            # docker-compose -f /home/${{ vars.WEBSRV_USR }}/compose.yml up -d johweb

            docker-compose --project-directory ./ up -d johweb

          '

      - name: "Preparing Production Environment in Proxy Server"
        run: |
          ssh ${{needs.boto3.outputs.bastion_host_args}} ${{ vars.WEBSRV_USR }}@${{needs.boto3.outputs.proxy_server_ip}} "

            # Configuring Caddyfile
            # sed -i 's/{$johweb_websrv_privateip}/${{needs.boto3.outputs.web_server_ip}}/g' /home/${{ vars.WEBSRV_USR }}/Caddyfile

            touch /home/${{ vars.WEBSRV_USR }}/Caddyfile

            echo '
            johith.com {
            reverse_proxy ${{needs.boto3.outputs.web_server_ip}}:8080
            }

            www.johith.com {
            reverse_proxy ${{needs.boto3.outputs.web_server_ip}}:8080
            }

            staging.johith.com {
            reverse_proxy ${{needs.boto3.outputs.web_server_ip}}:5949
            }
             ' > /home/${{ vars.WEBSRV_USR }}/Caddyfile

            # Set permissions on Compose file
            sudo chown ${{ vars.WEBSRV_USR }}:${{ vars.WEBSRV_USR }} /home/${{ vars.WEBSRV_USR }}/compose.yml && sudo chmod 0644 /home/${{ vars.WEBSRV_USR }}/compose.yml

            # Starting Web Server through Docker Compose
            docker-compose -f /home/${{ vars.WEBSRV_USR }}/compose.yml up -d caddy_reverse_proxy

          "

