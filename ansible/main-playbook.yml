- name: Configure Web and Proxy Servers
  hosts: web_servers, proxy_servers
  become: yes
  gather_facts: no
  tasks:

    - name: Waiting for instances to be online
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Update all packages
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install required packages
      ansible.builtin.dnf:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    - name: Install Docker
      ansible.builtin.dnf:
        name: docker
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add user to the docker group
      user:
        name: "{{ lookup('env', 'WEBSRV_USR') }}"
        groups: docker
        append: yes

    - name: Download Docker Compose
      get_url:
        #url: "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64"
        url: "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-aarch64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create a symbolic link for Docker Compose
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/compose
        state: link

    - name: Verify Docker installation
      command: docker --version
      register: docker_version

    - name: Verify Docker Compose installation
      command: docker-compose --version
      register: docker_compose_version

    - name: Print Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    - name: Print Docker Compose version
      debug:
        msg: "Docker Compose version: {{ docker_compose_version.stdout }}"


    - name: Ensure Docker config directory exists
      file:
        path: "/home/{{ lookup('env', 'WEBSRV_USR') }}/.docker"
        state: directory
        mode: '0755'
        owner: "{{ lookup('env', 'WEBSRV_USR') }}"
        group: "{{ lookup('env', 'WEBSRV_USR') }}"

    #- name: Set environment variables and install ECR credential helper
    #  shell: |
    #    export GOPATH=/home/{{ lookup('env', 'WEBSRV_USR') }}/go
    #    export PATH=$PATH:$GOPATH/bin
    #    export DEAFULT_ECR_HELPER_CFG="/home/{{ lookup('env', 'WEBSRV_USR') }}/.docker/config.json"
    #    go install github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@latest
    #    mv go/bin/docker-credential-ecr-login /usr/bin/

   # - name: Change ownership of Go directory to the user
   #   file:
   #     path: "/home/{{ lookup('env', 'WEBSRV_USR') }}/go"
   #     state: directory
   #     owner: "{{ lookup('env', 'WEBSRV_USR') }}"
   #     group: "{{ lookup('env', 'WEBSRV_USR') }}"
   #     recurse: yes

   # - name: Add ECR credential helper configuration to Docker config.json
   #   template:
   #     src: docker_config.json.j2
   #     dest: "/home/{{ lookup('env', 'WEBSRV_USR') }}/.docker/config.json"
   #     mode: '0644'

    #- name: Restarting Docker Service
    #  service:
    #    name: docker
    #    enabled: yes

    - name: "Rebooting all servers. Please wait....."
      ansible.builtin.reboot:

    - name: Final Docker Verifation.
      command: docker --version
      register: docker_version

- name: Configure Bastion Server
  hosts: bastion_server
  become: yes
  gather_facts: no
  tasks:

    - name: Waiting for instances to be online
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Update all packages in bastion host
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: "Rebooting bastion server. Please wait....."
      ansible.builtin.reboot:
        test_command: "whoami"
