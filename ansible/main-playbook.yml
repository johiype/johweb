- name: Install Docker and Docker Compose on Amazon Linux 2023
  hosts: johweb-ec2-pub1
  become: yes
  gather_facts: no
  tasks:
    - name: Update all packages
      yum:
        name: "*"
        state: latest

    - name: Install required packages
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - golang
        state: present

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add user to the docker group
      user:
        name: "{{ lookup('env', 'WEBSRV_USR') }}"
        groups: docker
        append: yes

    - name: Download Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create a symbolic link for Docker Compose
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/compose
        state: link

    - name: Verify Docker installation
      command: docker --version
      register: docker_version

    - name: Verify Docker Compose installation
      command: docker-compose --version
      register: docker_compose_version

    - name: Print Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    - name: Print Docker Compose version
      debug:
        msg: "Docker Compose version: {{ docker_compose_version.stdout }}"

    #- name: Copy Docker Compose file from local machine to remote instance
     # copy:
     #   src: /home/johith/johith-portfolio/webapp/compose.yml
     #   dest: "/home/{{ lookup('env', 'websrv_usr') }}/compose.yml"
     #   owner: "{{ lookup('env', 'WEBSRV_USR') }}"
     #   group: "{{ lookup('env', 'WEBSRV_USR') }}"
     #   mode: '0644'

   # - name: Copy Caddyfile from local machine to remote instance
   #   copy:
   #     src: /home/johith/johith-portfolio/webapp/Caddyfile
    #    dest: "/home/{{ lookup('env', 'WEBSRV_USR') }}/"
    #    owner: "{{ lookup('env', 'WEBSRV_USR') }}"
    #    group: "{{ lookup('env', 'WEBSRV_USR') }}"
    #    mode: '0644'

    - name: Ensure Docker config directory exists
      file:
        path: "/home/{{ lookup('env', 'WEBSRV_USR') }}/.docker"
        state: directory
        mode: '0755'
        owner: "{{ lookup('env', 'WEBSRV_USR') }}"
        group: "{{ lookup('env', 'WEBSRV_USR') }}"

    - name: Set environment variables and install ECR credential helper
      shell: |
        export GOPATH=/home/{{ lookup('env', 'WEBSRV_USR') }}/go
        export PATH=$PATH:$GOPATH/bin
        export DEAFULT_ECR_HELPER_CFG="/home/{{ lookup('env', 'WEBSRV_USR') }}/.docker/config.json"
        go install github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@latest
        mv go/bin/docker-credential-ecr-login /usr/bin/

    - name: Change ownership of Go directory to the user
      file:
        path: "/home/{{ lookup('env', 'WEBSRV_USR') }}/go"
        state: directory
        owner: "{{ lookup('env', 'WEBSRV_USR') }}"
        group: "{{ lookup('env', 'WEBSRV_USR') }}"
        recurse: yes

    - name: Add ECR credential helper configuration to Docker config.json
      blockinfile:
        path: "/home/{{ lookup('env', 'WEBSRV_USR') }}/.docker/config.json"
        block: |
          {
            "credHelpers": {
              "{{ lookup('env', 'ECR_ENDPOINT') }}": "ecr-login"
            }
          }
        create: yes
        mode: '0644'
        marker: ""

    - name: Restarting Docker Service
      service:
        name: docker
        state: restarted

#- name: johweserver Apache2 Container Setup
#  hosts: johweb-ec2-pub1
#  become_user: "{{ lookup('env', 'websrv_usr') }}"
#  gather_facts: no
#  tasks:

 #   - name: Checking if Docker is running
 #     service:
 #       name: docker
 #       state: started
 #       enabled: yes

#    - name: Run Docker Compose up
#      shell: docker-compose up -d
#      args:
#        executable: /bin/bash
#        chdir: "/home/{{ lookup('env', 'websrv_usr') }}"



## Triggering Ansible Playbook
